{
	"Angular Controller": {
		"prefix": "ng1controller",
		"body": [
			"namespace ${1:module} {",
			"\t'use strict';",
			"",
			"\texport class ${2:Controller}Controller {",
			"\t\tstatic \\$inject: Array<string> = ['${3:dependency1}'];",
			"\t\tconstructor(private ${3:dependency1}: ${4:dependency1Type}) {}",
			"",
			"\t}",
			"",
			"\tangular",
			"\t\t.module('${5:Module}')",
			"\t\t.controller('${2:Controller}Controller', ${2:Controller}Controller);",
			"}"
		]
	},
	"Angular Service": {
		"prefix": "ng1service",
		"body": [
			"namespace ${1:module} {",
			"\t'use strict';",
			"",
			"\texport interface I${2:Service} {",
			"\t}",
			"\texport class ${2:Service} implements I${2:Service} {",
			"\t\tstatic \\$inject: Array<string> = ['${3:dependency1}'];",
			"\t\tconstructor(private ${3:dependency1}: ${4:dependency1Type}) {}",
			"",
			"\t}",
			"",
			"\tangular",
			"\t\t.module('${5:Module}')",
			"\t\t.service('${2:Service}', ${2:Service});",
			"}"
		]
	},
	"Angular Module": {
		"prefix": "ng1module",
		"body": [
			"namespace ${1:module} {",
			"\t'use strict';",
			"",
			"\tangular.module('${2:Module}', [",
			"\t\t$0",
			"\t]);",
			"}"
		]
	},
	"Angular Component": {
		"prefix": "ng1component",
		"body": [
			"/**",
			" * Component ${1:component}",
			" */",
			"",
			"import { IComponentController, IComponentOptions, IOnChangesObject } from 'angular';",
			"",
			"const htmlTemplate = require('./${1:component}.component.html');",
			"",
			"require('./${1:component}.component.scss');",
			"",
			"class Controller implements IComponentController {",
			"",
			"    public static $inject = [",
			"        '${6:dependency}'",
			"    ];",
			"",
			"    // Bindings",
			"    public readonly ${2:bindingIn}: ${3:bindingInType};",
			"    public readonly ${4:bindingOut}: (data: { model: ${5:bindingOutType} }) => void;",
			"",
			"    constructor(",
			"        private readonly ${6:dependency}: ${7:dependencyType}",
			"    ) { }",
			"",
			"    public $onInit() {",
			"        // Called on each controller after all the controllers on an element have been constructed and had their bindings initialized",
			"        // (and before the pre & post linking functions for the directives on this element).",
			"        // This is a good place to put initialization code for your controller.",
			"    }",
			"    public $onChanges(changesObject: IOnChangesObject) {",
			"        // Called whenever one-way bindings are updated.",
			"        // The changesObj is a hash whose keys are the names of the bound properties that have changed,",
			"        // And the values are an object of the form { currentValue, previousValue, isFirstChange() }.",
			"        // Use this hook to trigger updates within a component such as cloning the bound value to prevent accidental mutation of the outer value.",
			"        const value = changesObject.${2:bindingIn};",
			"        const previousValue : ${3:bindingInType} = value.previousValue;",
			"        const currentValue : ${3:bindingInType} = value.currentValue;",
			"    }",
			"}",
			"",
			"const component: IComponentOptions = {",
			"    template: htmlTemplate,",
			"    controller: Controller,",
			"    bindings: {",
			"        ${2:bindingIn}: '<',",
			"        ${4:bindingOut}: '&'",
			"    }",
			"};",
			"export default component;"
		]
	}
}
